// Generated by gencpp from file tiggo_msgs/MapTarget.msg
// DO NOT EDIT!


#ifndef TIGGO_MSGS_MESSAGE_MAPTARGET_H
#define TIGGO_MSGS_MESSAGE_MAPTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiggo_msgs
{
template <class ContainerAllocator>
struct MapTarget_
{
  typedef MapTarget_<ContainerAllocator> Type;

  MapTarget_()
    : id(0)
    , longitude(0.0)
    , latitude(0.0)
    , attribute1(0)
    , attribute2(0)
    , onetwoway(0)
    , waySum(0)
    , targetWay(0)
    , laneWidth(0.0)
    , d2lcurb(0.0)
    , d2rcurb(0.0)
    , target_dist(0.0)
    , totals(0.0)
    , stop(false)
    , pedestrian(false)  {
    }
  MapTarget_(const ContainerAllocator& _alloc)
    : id(0)
    , longitude(0.0)
    , latitude(0.0)
    , attribute1(0)
    , attribute2(0)
    , onetwoway(0)
    , waySum(0)
    , targetWay(0)
    , laneWidth(0.0)
    , d2lcurb(0.0)
    , d2rcurb(0.0)
    , target_dist(0.0)
    , totals(0.0)
    , stop(false)
    , pedestrian(false)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef int8_t _attribute1_type;
  _attribute1_type attribute1;

   typedef int8_t _attribute2_type;
  _attribute2_type attribute2;

   typedef int8_t _onetwoway_type;
  _onetwoway_type onetwoway;

   typedef int8_t _waySum_type;
  _waySum_type waySum;

   typedef int8_t _targetWay_type;
  _targetWay_type targetWay;

   typedef double _laneWidth_type;
  _laneWidth_type laneWidth;

   typedef double _d2lcurb_type;
  _d2lcurb_type d2lcurb;

   typedef double _d2rcurb_type;
  _d2rcurb_type d2rcurb;

   typedef double _target_dist_type;
  _target_dist_type target_dist;

   typedef double _totals_type;
  _totals_type totals;

   typedef uint8_t _stop_type;
  _stop_type stop;

   typedef uint8_t _pedestrian_type;
  _pedestrian_type pedestrian;




  typedef boost::shared_ptr< ::tiggo_msgs::MapTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiggo_msgs::MapTarget_<ContainerAllocator> const> ConstPtr;

}; // struct MapTarget_

typedef ::tiggo_msgs::MapTarget_<std::allocator<void> > MapTarget;

typedef boost::shared_ptr< ::tiggo_msgs::MapTarget > MapTargetPtr;
typedef boost::shared_ptr< ::tiggo_msgs::MapTarget const> MapTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiggo_msgs::MapTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiggo_msgs::MapTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tiggo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'tiggo_msgs': ['/home/cyberc3/SSD-Tensorflow-master/pedestrian_ws/src/tiggo_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiggo_msgs::MapTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiggo_msgs::MapTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiggo_msgs::MapTarget_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de791b218c5b0339622acbdb8ab05809";
  }

  static const char* value(const ::tiggo_msgs::MapTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde791b218c5b0339ULL;
  static const uint64_t static_value2 = 0x622acbdb8ab05809ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiggo_msgs/MapTarget";
  }

  static const char* value(const ::tiggo_msgs::MapTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id\n\
float64 longitude\n\
float64 latitude\n\
int8 attribute1\n\
int8 attribute2\n\
int8 onetwoway\n\
int8 waySum\n\
int8 targetWay\n\
float64 laneWidth\n\
float64 d2lcurb\n\
float64 d2rcurb\n\
float64 target_dist\n\
float64 totals\n\
bool stop\n\
bool pedestrian\n\
\n\
";
  }

  static const char* value(const ::tiggo_msgs::MapTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.attribute1);
      stream.next(m.attribute2);
      stream.next(m.onetwoway);
      stream.next(m.waySum);
      stream.next(m.targetWay);
      stream.next(m.laneWidth);
      stream.next(m.d2lcurb);
      stream.next(m.d2rcurb);
      stream.next(m.target_dist);
      stream.next(m.totals);
      stream.next(m.stop);
      stream.next(m.pedestrian);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiggo_msgs::MapTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiggo_msgs::MapTarget_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "attribute1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.attribute1);
    s << indent << "attribute2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.attribute2);
    s << indent << "onetwoway: ";
    Printer<int8_t>::stream(s, indent + "  ", v.onetwoway);
    s << indent << "waySum: ";
    Printer<int8_t>::stream(s, indent + "  ", v.waySum);
    s << indent << "targetWay: ";
    Printer<int8_t>::stream(s, indent + "  ", v.targetWay);
    s << indent << "laneWidth: ";
    Printer<double>::stream(s, indent + "  ", v.laneWidth);
    s << indent << "d2lcurb: ";
    Printer<double>::stream(s, indent + "  ", v.d2lcurb);
    s << indent << "d2rcurb: ";
    Printer<double>::stream(s, indent + "  ", v.d2rcurb);
    s << indent << "target_dist: ";
    Printer<double>::stream(s, indent + "  ", v.target_dist);
    s << indent << "totals: ";
    Printer<double>::stream(s, indent + "  ", v.totals);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
    s << indent << "pedestrian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedestrian);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIGGO_MSGS_MESSAGE_MAPTARGET_H
