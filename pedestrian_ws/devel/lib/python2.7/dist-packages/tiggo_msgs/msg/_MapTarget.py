# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tiggo_msgs/MapTarget.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MapTarget(genpy.Message):
  _md5sum = "de791b218c5b0339622acbdb8ab05809"
  _type = "tiggo_msgs/MapTarget"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 id
float64 longitude
float64 latitude
int8 attribute1
int8 attribute2
int8 onetwoway
int8 waySum
int8 targetWay
float64 laneWidth
float64 d2lcurb
float64 d2rcurb
float64 target_dist
float64 totals
bool stop
bool pedestrian

"""
  __slots__ = ['id','longitude','latitude','attribute1','attribute2','onetwoway','waySum','targetWay','laneWidth','d2lcurb','d2rcurb','target_dist','totals','stop','pedestrian']
  _slot_types = ['int16','float64','float64','int8','int8','int8','int8','int8','float64','float64','float64','float64','float64','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,longitude,latitude,attribute1,attribute2,onetwoway,waySum,targetWay,laneWidth,d2lcurb,d2rcurb,target_dist,totals,stop,pedestrian

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapTarget, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.attribute1 is None:
        self.attribute1 = 0
      if self.attribute2 is None:
        self.attribute2 = 0
      if self.onetwoway is None:
        self.onetwoway = 0
      if self.waySum is None:
        self.waySum = 0
      if self.targetWay is None:
        self.targetWay = 0
      if self.laneWidth is None:
        self.laneWidth = 0.
      if self.d2lcurb is None:
        self.d2lcurb = 0.
      if self.d2rcurb is None:
        self.d2rcurb = 0.
      if self.target_dist is None:
        self.target_dist = 0.
      if self.totals is None:
        self.totals = 0.
      if self.stop is None:
        self.stop = False
      if self.pedestrian is None:
        self.pedestrian = False
    else:
      self.id = 0
      self.longitude = 0.
      self.latitude = 0.
      self.attribute1 = 0
      self.attribute2 = 0
      self.onetwoway = 0
      self.waySum = 0
      self.targetWay = 0
      self.laneWidth = 0.
      self.d2lcurb = 0.
      self.d2rcurb = 0.
      self.target_dist = 0.
      self.totals = 0.
      self.stop = False
      self.pedestrian = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h2d5b5d2B.pack(_x.id, _x.longitude, _x.latitude, _x.attribute1, _x.attribute2, _x.onetwoway, _x.waySum, _x.targetWay, _x.laneWidth, _x.d2lcurb, _x.d2rcurb, _x.target_dist, _x.totals, _x.stop, _x.pedestrian))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.id, _x.longitude, _x.latitude, _x.attribute1, _x.attribute2, _x.onetwoway, _x.waySum, _x.targetWay, _x.laneWidth, _x.d2lcurb, _x.d2rcurb, _x.target_dist, _x.totals, _x.stop, _x.pedestrian,) = _struct_h2d5b5d2B.unpack(str[start:end])
      self.stop = bool(self.stop)
      self.pedestrian = bool(self.pedestrian)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h2d5b5d2B.pack(_x.id, _x.longitude, _x.latitude, _x.attribute1, _x.attribute2, _x.onetwoway, _x.waySum, _x.targetWay, _x.laneWidth, _x.d2lcurb, _x.d2rcurb, _x.target_dist, _x.totals, _x.stop, _x.pedestrian))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.id, _x.longitude, _x.latitude, _x.attribute1, _x.attribute2, _x.onetwoway, _x.waySum, _x.targetWay, _x.laneWidth, _x.d2lcurb, _x.d2rcurb, _x.target_dist, _x.totals, _x.stop, _x.pedestrian,) = _struct_h2d5b5d2B.unpack(str[start:end])
      self.stop = bool(self.stop)
      self.pedestrian = bool(self.pedestrian)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h2d5b5d2B = struct.Struct("<h2d5b5d2B")
